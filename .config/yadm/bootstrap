#!/usr/bin/env bash

# Lib utilities {{{
NAME=BOOTSTRAPPER

function curtime () {
    date +'%H:%M:%S'
}
function log () {
    local append_newline=false
    if [ $1 = "-n" ]; then
        shift
        append_newline=true
    fi
    printf "@${NAME}($(curtime))[$1]: $2"
    [[ ${append_newline} = true ]] && printf "\n"
}
function exists () {
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}
function pause () {
    read -e -p "@${NAME}($(curtime))[PROMPT]: Press any key to continue" -n 1 -r
}
function confirm () {
    while true; do
        read -e -p "@${NAME}($(curtime))[PROMPT]: $1 [YyNn] " -n 1 -r
        case ${REPLY} in
            [Yy])
                return 0;;
            [Nn])
                return 1;;
            *)
                log -n ERROR "Please answer Y or N";;
        esac
    done
}
function query () {
    read -p "@${NAME}($(curtime))[PROMPT]: $1 " -r
    echo ${REPLY}
}

function install_from_list () {
    local input_type=$1         # Name of the input type; e.g. "packages"
    local installer=$2          # Installer prefix; e.g. "brew install"
    local checker=$3            # Checker prefix; e.g. "brew list"
    local packages=( ${@:4} )   # Input list; e.g. "(cmatrix lolcat toilet nethack)"

    log INFO "Checking ${input_type}.."
    declare -a missing_packages
    for package in "${packages[@]}"; do
        echo -n "."
        if ! eval "${checker} ${package}" >/dev/null 2>&1; then
            missing_packages+=(${package})
        fi
    done
    echo
    num_missing=${#missing_packages[@]}
    if [[ ${num_missing} -gt 0 ]]; then
        log -n INFO "The following ${input_type} are missing: ${missing_packages[*]}"
        if [[ ${num_missing} -gt 1 ]] && confirm "Install all ${input_type}?"; then
            eval "${installer} ${missing_packages[@]}"
        else
            for package in "${missing_packages[@]}"; do
                if confirm "Install \"${package}\"?"; then
                    eval "${installer} ${package}"
                fi
            done
        fi
    else
        log -n INFO "No missing ${input_type}"
    fi
    unset missing_packages
}

function install_repos_from_list () {
    local repos=( "${@}" )

    REPO_DIR=$(mktemp -d)
    d=$(pwd)

    function get_repo_name () {
        name=$(basename "${1##*\/}")
        echo "${name%.*}"
    }

    declare -a install_repos
    for (( i=0; i<${#repos[@]} ; i+=2 )) ; do
        repo="${repos[i]}"
        echo $(get_repo_name "$repo")
        if confirm "Install ${repo}?"; then
            install_repos+=("${repos[i]}" "${repos[i+1]}")
        fi
    done

    for (( i=0; i<${#install_repos[@]} ; i+=2 )) ; do
        repo="${install_repos[i]}"
        builder="${install_repos[i+1]}"
        repo_name=$(get_repo_name "${repo}")
        log -n "Installing ${repo}"
        git clone "${repo}" "${REPO_DIR}/${repo_name}"
        cd "${REPO_DIR}/${repo_name}"
        eval "${builder}"
        log -n "Installed!"
    done
    unset install_repos

    rm -Rf "${REPO_DIR}"
    cd "$d"
}
# }}}

# Initializer {{{
case $(uname -s) in
    *Darwin*)
        system_type='Darwin'
        dist_type='Darwin'
        ;;
    *Linux*)
        log -n INFO "Identified system as Linux"
        if [ ! -f /etc/lsb-release ]; then
            log -n ERROR "Failed to identify distro; terminating"
            exit 1
        fi
        dist_id=$(cat /etc/lsb-release | grep DISTRIB_ID | cut -f2 -d"=")
        case $dist_id in
            *Mint*)
                system_type='Debian'
                dist_type='Mint'
                ;;
            *Ubuntu*)
                system_type='Debian'
                dist_type='Ubuntu'
                ;;
            *Debian*)
                dist_release=$(cat /etc/lsb-release | grep DISTRIB_RELEASE | cut -f2 -d"=")
                system_type='Debian'
                if [ "${dist_release}" = "rodete" ]; then
                    dist_type='Rodete'
                else
                    dist_type='Debian'
                fi
                ;;
            *Manjaro*)
                system_type='Arch'
                dist_type='Manjaro'
                ;;
            *SteamOS*)
                system_type='Arch'
                dist_type='SteamOS'
                ;;
            *)
                log -n ERROR "Unsupported Linux OS: $dist_id"
                exit 1
                ;;
        esac
        ;;
    *)
        log -n ERROR "Unsupported OS"
        exit 1
        ;;
esac
# }}}

# MacOS {{{
if [ "${system_type}" = "Darwin" ]; then
    log -n INFO "Starting bootstrap for MacOS"

    casks=(
        docker
        dropbox
        kitty
        mpv
        vnc-viewer
    )
    packages=(
        dict
        fd
        fzf
        ghostscript
        git-delta
        httpie
        imagemagick
        neofetch
        neovim
        npm
        python-tk
        ripgrep
        texlive
        yadm
    )

    if ! command -v brew >/dev/null 2>&1; then
        log -n INFO "Installing Homebrew"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    install_from_list \
        "casks" \
        "brew install --cask" \
        "brew list --cask" \
        "${casks[@]}"
    install_from_list \
        "packages" \
        "brew install" \
        "brew list" \
        "${packages[@]}"

    # Git Manager
    if ! brew tap | grep microsoft/git >/dev/null 2>&1 && confirm "Install Github Manager?"; then
        brew tap microsoft/git
        brew install --cask git-credential-manager-core
    fi
    # Fonts
    if ! brew tap | grep cask-fonts >/dev/null 2>&1 && confirm "Install fonts?"; then
        brew tap homebrew/cask-fonts
        brew install --cask font-hack-nerd-font
    fi
# }}}

# Debian {{{
elif [ "${system_type}" = "Debian" ]; then
    log -n INFO "Starting bootstrap for Debian"
    packages=(
        bat
        brightnessctl
        cmake
        cmatrix
        fd-find
        figlet
        fortune
        fzf
        gh
        git
        golang-go
        lolcat
        meson
        ncal
        neofetch
        neovim
        nodejs
        npm
        playerctl
        python3-pip
        ranger
        ripgrep
        ruby-dev
        scdoc
        toilet
        unzip
        yadm
        zip
        zsh
    )

    # Special handling for Rodete
    if [ "${dist_type}" = "Rodete" ]; then
        log -n INFO "Detected distribution as Rodete"
        # Rodete doesn't allow custom PPAs; use glinux-add-repo instead
        g_repos=(
            "github-cli stable"
        )
        for g_repo in "${g_repos[@]}"; do
            log -n INFO "Adding glinux repo: ${g_repo}"
            glinux-add-repo -k -c "$g_repo"
        done
        # We also need some google-specific packages on rodete
        g_packages=(
            git-remote-google
        )
        packages=("${packages[@]}" "${g_packages[@]}")


    # Otherwise add PPAs as normal
    else
        # Add NodeSource repository & signing key (with script)
        if ! grep -h "^deb.*node_14.x" /etc/apt/sources.list.d/* >/dev/null 2>&1; then
            log -n INFO "Adding NodeSource repository & signing key"
            curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
        fi

        # Add other missing repositories
        function add_ppa () {
            for ppa in "$@"; do
                grep -h "^deb.*${ppa}" /etc/apt/sources.list.d/* >/dev/null 2>&1
                if [ $? -ne 0 ]; then
                    log -n INFO "Adding ppa:${ppa}"
                    sudo add-apt-repository -y ppa:${ppa}
            fi
            done
        }
        add_ppa \
            neovim-ppa/stable \
            neovim-ppa/unstable
    fi

    # Refresh repositories
    log -n INFO "Updating repository listing"
    sudo apt update

    # Install `aptitude` package manager
    if ! exists "aptitude"; then
    echo 1
        sudo apt-get install aptitude
    echo 2
    fi

    # Install missing packages
    function check_package () {
        pkg=$1
        dpkg-query -W "$pkg" >/dev/null 2>&1 && dpkg-query -s "$pkg" >/dev/null 2>&1
        return $!
    }

    install_from_list \
        "packages" \
        "sudo aptitude install" \
        "check_package" \
        "${packages[@]}"

    if ! exists "delta"; then
        log -n WARNING '`delta` must be installed manually on Debian-based systems'
        log -n PROMPT 'Please download the latest release of `delta` and run `dpkg -i <file.deb>` to install'
        log -n PROMPT 'https://github.com/dandavison/delta/releases'
        pause
    fi
    # Symlink required for `fd` on Debian-based systems
    if exists "fdfind" && ! exists "fd"; then
        mkdir -p ${HOME}/.local/bin
        ln -s $(which fdfind) ${HOME}/.local/bin/fd
    fi

    # Sway
    if ! exists "neofetch"; then
        log -n WARNING "Cannot check WM without neofetch; install first"
    elif [ $(neofetch wm | cut -f2 -d' ') = 'sway' ] && confirm "Build and install sway packages?"; then
        sway_packages=(
            clipman
            grimshot
            libinih-dev
            libinput-tools
            libpam-dev
            libwayland-dev
            libxkbcommon-dev
            waybar
            wayland-protocols
            wdisplays
            wl-clipboard
            wofi
            xdg-desktop-portal-wlr
        )
        sway_gems=(
            fusuma
            fusuma-plugin-sendkey
        )
        build_repos=(
            # Swaylock-effects: fancier swaylock
            "https://github.com/mortie/swaylock-effects.git"
                "meson build && ninja -C build && sudo ninja -C build install"
            # Kanshi: display/workspace manager
            "https://git.sr.ht/~emersion/kanshi"
                "meson build && ninja -C build && sudo ninja -C build install"
            # Wob: "Wayland Overlay Bar" (status bar overlay)
            "https://github.com/francma/wob.git"
                "meson build && ninja -C build && sudo ninja -C build install"
            # Sov: "Sway OverView" (workspace previews)
            "https://github.com/milgra/sov.git"
                "meson build --buildtype=release && ninja -C build && sudo ninja -C build install"
        )
        install_from_list \
            "sway packages" \
            "sudo aptitude install" \
            "check_package" \
            "${sway_packages[@]}"
        install_from_list \
            "sway gems" \
            "sudo gem install" \
            "gem list | grep" \
            "${sway_gems[@]}"
        install_repos_from_list \
            "${build_repos[@]}"

        # Add ourselves to "input" group (needed for fusuma)
        if ! groups | tr ' ' '\n' | grep 'input' >/dev/null; then
            log -n INFO "Adding user to group \"input\""
            sudo gpasswd -a $USER input
            newgrp input
        fi
    fi

    log -n INFO "Upgrading packages"
    sudo apt upgrade
# }}}

# SteamOS {{{
elif [ "${system_type}" = 'Arch' ] && [ "${dist_type}" = 'SteamOS' ]; then
    log -n INFO "Starting bootstrap for SteamOS"

    packages=(
        nixpkgs.clang
        nixpkgs.cmake
        nixpkgs.delta
        nixpkgs.fzf
        nixpkgs.git
        nixpkgs.neofetch
        nixpkgs.neovim
        nixpkgs.yadm
    )

    # Install Rust
    if [ ! -d "${HOME}/.cargo" ]; then
        log -n INFO "Installing Rust"
        curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
        source "${HOME}/.cargo/env"
    elif ! exists "cargo"; then
        source "${HOME}/.cargo/env"
    fi

    # Install Nix
    if ! exists "nix-user-chroot"; then
        log -n INFO "Installing Nix-user-chroot"
        cargo install nix-user-chroot
    fi
    if [ ! -d "${HOME}/.nix" ]; then
        log -n INFO "Installing Nix"
        mkdir -m 0755 "${HOME}/.nix"
        nix-user-chroot "${HOME}/.nix" bash -c "curl -L https://nixos.org/nix/install | bash"
    fi

    # Enable Nix
    if [ ! -d /nix ]; then
        log -n INFO "Restarting bootstrap in Nix-enabled env"
        echo
        nix-user-chroot "${HOME}/.nix" bash -l "$0"
        exit $?
    fi

    function check_pkg () {
        pkg=$(echo "$1" | cut -d'.' -f2)
	nix-env -q '.*'"$pkg"'.*'
	return $?
    }

    install_from_list \
        "packages" \
        "nix-env -iA" \
        "check_pkg" \
        "${packages[@]}"

    # Upgrade packages
    log -n INFO "Updating nix-env (this may take a bit)"
    nix-env -u
# }}}

# Arch {{{
elif [ "${system_type}" = 'Arch' ]; then
    log -n INFO "Starting bootstrap for Arch"
    core_packages=(
        fd
        fzf
        git
        git-delta
        neofetch
        neovim
    )
    user_packages=(
        yadm-git
    )

    install_from_list \
        "core packages" \
        "sudo pacman -S" \
        "pacman -Qi" \
        "${core_packages[@]}"

    if ! exists "yay"; then
        log -n INFO 'Installing yay'
        d=$(pwd)
        cd /tmp
        git clone https://aur.archlinux.org/yay-git.git
        cd yay-git
        makepkg -si
        cd $d
    fi

    install_from_list \
        "user packages" \
        "yay -Syu" \
        "pacman -Qi" \
        "${user_packages[@]}"
fi
# }}}

# Post-Install {{{

# YADM
if ! exists yadm >/dev/null 2>&1; then
    log -n ERROR "YADM is required to proceed; please install YADM"
    exit 1
elif ! $(yadm list >/dev/null 2>&1); then
    log -n INFO "Initializing YADM"
    yadm clone --no-bootstrap "https://github.com/vmizener/dots.git"
    yadm submodule update --init --recursive
else
    log -n INFO "Updating YADM subrepos"
    yadm submodule update --init --recursive
fi

log -n INFO "!!! Base install completed successfully !!!"
log -n INFO "Hit CTRL-C at any time to skip post-install configuration"

# Python
if exists python3 >/dev/null 2>&1 && confirm "Update Python3?"; then
    if ! exists pip3; then
        log -n INFO "Installing Pip"
	# Ensure .local/bin is on path (it's where pip gets installed)
	export PATH="${PATH}:${HOME}/.local/bin"
        python3 -m ensurepip --default-pip
    fi
    log -n INFO "Installing Python packages"
    pip3 install -r "${HOME}/.config/yadm/requirements.txt" --user
    log -n INFO "Updating Pip"
    pip3 install --upgrade pip --user
fi

# NPM
if ! exists npm >/dev/null 2>&1; then
    log -n WARNING "NPM is not installed; some packages will be missing"
elif confirm "Update NPM?"; then
    log -n INFO "Updating NPM"
    sudo npm install -g npm
    node_packages=(
        json-server # Deploy a fake REST API server
    )
    install_from_list \
        "NPM packages" \
        "sudo npm install -g" \
        "npm list -g --depth 0" \
        ${node_packages}
fi

# Neovim
if command -v nvim >/dev/null 2>&1 && confirm "Bootstrap Neovim?"; then
    log -n INFO "Updating Neovim"
    if [ ! -d ~/.local/share/nvim/site/pack/packer ]; then
        git clone https://github.com/wbthomason/packer.nvim \
             ~/.local/share/nvim/site/pack/packer/start/packer.nvim
    fi
    # log -n INFO "Updating Neovim"
    # if [ ! -f ~/.local/share/nvim/site/autoload/plug.vim ]; then
    #     log INFO "Installing Vim-Plug"
    #     sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
    #         https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    # fi
    # log -n INFO "Updating Neovim plugins"
    nvim '+autocmd User PackerComplete sleep 100m | qall' +PackerSync
    # nvim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
fi

# Kitty
if ! command -v kitty >/dev/null 2>&1 && confirm "Install Kitty terminal?"; then
    log -n INFO "Installing Kitty"
    curl -L https://sw.kovidgoyal.net/kitty/installer.sh | sh /dev/stdin
    if [ ! "${system_type}" = "Darwin" ]; then
        ln -s ~/.local/kitty.app/bin/kitty ~/.local/bin/
        cp ~/.local/kitty.app/share/applications/kitty.desktop ~/.local/share/applications/
        cp ~/.local/kitty.app/share/applications/kitty-open.desktop ~/.local/share/applications/
        sed -i "s|Icon=kitty|Icon=/home/$USER/.local/kitty.app/share/icons/hicolor/256x256/apps/kitty.png|g" ~/.local/share/applications/kitty*.desktop
        sed -i "s|Exec=kitty|Exec=/home/$USER/.local/kitty.app/bin/kitty|g" ~/.local/share/applications/kitty*.desktop
    fi
    # Have something for installing kitty terminfo?
    # `kitty +kitten ssh <host>`
fi
# }}}

# Cleanup {{{
log -n INFO "Bootstrap completed successfully!"
# }}}

# vim: set foldmethod=marker foldlevel=0 :
