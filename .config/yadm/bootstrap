#!/usr/bin/env bash

#################
# Lib utilities
#################
NAME=BOOTSTRAPPER

function curtime () {
    date +'%H:%M:%S'
}
function log () {
    local append_newline=false
    if [ $1 = "-n" ]; then
        shift
        append_newline=true
    fi
    printf "@${NAME}($(curtime))[$1]: $2"
    [[ ${append_newline} = true ]] && printf "\n"
}
function exists () {
    if command -v "$1" >/dev/null 2>&1; then
        return 0
    else
        return 1
    fi
}
function pause () {
    read -e -p "@${NAME}($(curtime))[PROMPT]: Press any key to continue" -n 1 -r
}
function confirm () {
    while true; do
        read -e -p "@${NAME}($(curtime))[PROMPT]: $1 [YyNn] " -n 1 -r
        case ${REPLY} in
            [Yy])
                return 0;;
            [Nn])
                return 1;;
            *)
                log -n ERROR "Please answer Y or N";;
        esac
    done
}
function query () {
    read -p "@${NAME}($(curtime))[PROMPT]: $1 " -r
    echo ${REPLY}
}

function install_from_list () {
    local input_type=$1         # Name of the input type; e.g. "packages"
    local installer=$2          # Installer prefix; e.g. "brew install"
    local checker=$3            # Checker prefix; e.g. "brew list"
    local packages=( ${@:4} )   # Input list; e.g. "(neofetch nethack)"

    log INFO "Checking ${input_type}.."
    declare -a missing_packages
    for package in "${packages[@]}"; do
        echo -n "."
        if ! eval ${checker} ${package} >/dev/null 2>&1; then
            missing_packages+=(${package})
        fi
    done
    echo
    num_missing=${#missing_packages[@]}
    if [[ ${num_missing} -gt 0 ]]; then
        log -n INFO "The following ${input_type} are missing: ${missing_packages[*]}"
        if [[ ${num_missing} -gt 1 ]] && confirm "Install all ${input_type}?"; then
            eval ${installer} ${missing_packages[@]}
        else
            for package in "${missing_packages[@]}"; do
                if confirm "Install \"${package}\"?"; then
                    eval ${installer} ${package}
                fi
            done
        fi
    else
        log -n INFO "No missing ${input_type}"
    fi
    unset missing_packages
}

#################
# Initializer
#################

cd ${HOME}
case $(uname -s) in
    *Darwin*)
        log -n INFO "Starting bootstrap for MacOS"
        system_type='Darwin'
        dist_type='Darwin'
        ;;
    *Linux*)
        if [ ! -f /etc/lsb-release ]; then
            log -n ERROR "Failed to identify distro; terminating"
            exit 1
        fi
        dist_id=$(head -n1 /etc/lsb-release | cut -f2 -d"=")
        case $dist_id in
            *Mint*)
                log -n INFO "Starting bootstrap for Linux Mint"
                system_type='Debian'
                dist_type='Mint'
                ;;
            *Ubuntu*)
                log -n INFO "Starting bootstrap for Ubuntu"
                system_type='Debian'
                dist_type='Ubuntu'
                ;;
            *Manjaro*)
                log -n INFO "Starting bootstrap for Manjaro Linux"
                system_type='Arch'
                dist_type='Manjaro'
                ;;
            *)
                log -n ERROR "Unsupported Linux OS"
                exit 1
                ;;
        esac
        ;;
    *)
        log -n ERROR "Unsupported OS"
        exit 1
        ;;
esac

#################
# MacOS
#################
if [ "${system_type}" = "Darwin" ]; then
    casks=(
        docker
        dropbox
        kitty
        mpv
        vnc-viewer
    )
    packages=(
        dict
        fd
        fzf
        ghostscript
        git-delta
        httpie
        imagemagick
        neofetch
        neovim
        npm
        python-tk
        ripgrep
        texlive
        yadm
    )

    if ! command -v brew >/dev/null 2>&1; then
        log -n INFO "Installing Homebrew"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    fi

    install_from_list \
        "casks" \
        "brew install --cask" \
        "brew list --cask" \
        "${casks[@]}"
    install_from_list \
        "packages" \
        "brew install" \
        "brew list" \
        "${packages[@]}"

    # Git Manager
    if ! brew tap | grep microsoft/git >/dev/null 2>&1 && confirm "Install Github Manager?"; then
        brew tap microsoft/git
        brew install --cask git-credential-manager-core
    fi
    # Fonts
    if ! brew tap | grep cask-fonts >/dev/null 2>&1 && confirm "Install fonts?"; then
        brew tap homebrew/cask-fonts
        brew install --cask font-hack-nerd-font
    fi

#################
# Debian
#################
elif [ "${system_type}" = "Debian" ]; then
    packages=(
        fd-find
        fzf
        git
        neofetch
        neovim
        nodejs
        npm
        python3-pip
        unzip
        yadm
        zip
        zsh
    )

    # Add NodeSource repository & signing key (with script)
    if ! grep -h "^deb.*node_14.x" /etc/apt/sources.list.d/* >/dev/null 2>&1; then
        log -n INFO "Adding NodeSource repository & signing key"
        curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
    fi

    # Add other missing repositories
    function add_ppa () {
        for ppa in "$@"; do
            grep -h "^deb.*${ppa}" /etc/apt/sources.list.d/* >/dev/null 2>&1
            if [ $? -ne 0 ]; then
                log -n INFO "Adding ppa:${ppa}"
                sudo add-apt-repository -y ppa:${ppa}
        fi
        done
    }
    add_ppa \
        neovim-ppa/stable

    log -n INFO "Updating repository listing"
    sudo apt update

    # Install `aptitude` package manager
    if ! exists "aptitude"; then
        apt-get install aptitude
    fi

    install_from_list \
        "packages" \
        "sudo aptitude install" \
        "dpkg-query -W" \
        "${packages[@]}"

    if ! exists "delta"; then
        log -n WARNING '`delta` must be installed manually on Debian-based systems'
        log -n PROMPT 'Please download the latest release of `delta` and run `dpkg -i <file.deb>` to install'
        log -n PROMPT 'https://github.com/dandavison/delta/releases'
        pause
    fi
    # Symlink required for `fd` on Debian-based systems
    if exists "fdfind" && ! exists "fd"; then
        mkdir -p ${HOME}/.local/bin
        ln -s $(which fdfind) ${HOME}/.local/bin/fd
    fi

    log -n INFO "Upgrading packages"
    sudo apt upgrade

################
# Arch
################
elif [ "${system_type}" = 'Arch' ]; then
    core_packages=(
        fd
        fzf
        git
        git-delta
        neofetch
        neovim
    )
    user_packages=(
        yadm-git
    )

    install_from_list \
        "core packages" \
        "sudo pacman -S" \
        "pacman -Qi" \
        "${core_packages[@]}"

    if ! exists "yay"; then
        log -n INFO 'Installing yay'
        d=$(pwd)
        cd /tmp
        git clone https://aur.archlinux.org/yay-git.git
        cd yay-git
        makepkg -si
        cd $d
    fi

    install_from_list \
        "user packages" \
        "yay -Syu" \
        "pacman -Qi" \
        "${user_packages[@]}"
fi

#################
# Post-Install
#################

# YADM
if ! command -v yadm >/dev/null 2>&1; then
    log -n ERROR "YADM is required to proceed; please install YADM"
    exit 1
elif ! $(yadm list >/dev/null 2>&1); then
    log -n INFO "Initializing YADM"
    yadm clone --no-bootstrap "https://github.com/vmizener/dots.git"
    yadm submodule update --init --recursive
fi

# Python
if command -v python3 >/dev/null 2>&1 && confirm "Update Python3?"; then
    log -n INFO "Installing Python packages"
    pip3 install -r .config/yadm/requirements.txt --user
    log -n INFO "Updating Pip"
    pip3 install --upgrade pip --user
fi

# NPM
if ! command -v npm >/dev/null 2>&1; then
    log -n WARNING "NPM is not installed; some packages will be missing"
elif confirm "Update NPM?"; then
    log -n INFO "Updating NPM"
    sudo npm install -g npm
    node_packages=(
        json-server # Deploy a fake REST API server
    )
    install_from_list \
        "NPM packages" \
        "sudo npm install -g" \
        "npm list -g --depth 0" \
        "${node_packages[@]}"
fi

# Neovim
if command -v nvim >/dev/null 2>&1 && confirm "Bootstrap Neovim?"; then
    log -n INFO "Updating Neovim"
    if [ ! -d ~/.local/share/nvim/site/pack/packer ]; then
        git clone https://github.com/wbthomason/packer.nvim \
             ~/.local/share/nvim/site/pack/packer/start/packer.nvim
    fi
    # log -n INFO "Updating Neovim"
    # if [ ! -f ~/.local/share/nvim/site/autoload/plug.vim ]; then
    #     log INFO "Installing Vim-Plug"
    #     sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
    #         https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    # fi
    # log -n INFO "Updating Neovim plugins"
    nvim '+autocmd User PackerComplete sleep 100m | qall' +PackerSync
    # nvim '+PlugUpdate' '+PlugClean!' '+PlugUpdate' '+qall'
fi

#################
# Cleanup
#################

log -n INFO "Bootstrap completed successfully!"
