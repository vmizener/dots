# Default config for sway
#
# Copy this to ~/.config/sway/config and edit it to your liking.
#
# Read `man 5 sway` for a complete reference.

### Variables
#
# Mod4 for logo key. Mod1 for alt.
set $mod Mod4
set $alt Mod1

# Background
set $background /usr/share/backgrounds/sway/Sway_Wallpaper_Blue_1920x1080.png
#/usr/share/backgrounds/Gwallpaper-gLinux-vertical.png

# Home row direction keys, like vim
set $left h
set $down j
set $up k
set $right l

# Your preferred terminal emulator
set $term ~/.local/bin/kitty -1

# Your preferred application launcher
# Note: pass the final command to swaymsg so that the resulting window can be opened
# on the original workspace that the command was run on.
#set $menu dmenu_path | dmenu | xargs swaymsg exec --
set $menu wofi -Ii --show=drun


include /etc/sway/config-vars.d/*


### General Settings

# Use auto-orientation (as opposed to horizontal)
default_orientation auto
# Use gaps
gaps {
    inner 5
    outer 5
}
# Don't include title-bar in border
default_border pixel 5
smart_borders on

# Initialize ssh-agent keyring
exec sh -c "ssh-agent -s -a $SSH_AUTH_SOCK"

# Export display settings to D-Bus
exec dbus-update-activation-environment --systemd WAYLAND_DISPLAY XDG_CURRENT_DESKTOP=sway

# Overlay bar (for e.g. volume control)
set $WOBSOCK $XDG_RUNTIME_DIR/wob.sock
exec rm -f $WOBSOCK && mkfifo $WOBSOCK && tail -f $WOBSOCK | wob

# Startup scripts
exec_always ~/.config/sway/daemons.sh
exec_always ~/.config/sway/swayidle.sh
exec_always ~/.config/waybar/waybar.sh

### Output configuration
#

# Default wallpaper
output * bg $background fill

# Disable laptop's display when lid is closed
bindswitch lid:on output eDP-1 disable
bindswitch lid:off output eDP-1 enable

#
# Example configuration:
#
#   output HDMI-A-1 resolution 1920x1080 position 1920,0
#
# You can get the names of your outputs by running: swaymsg -t get_outputs


### Input configuration
#
# Example configuration:
#
#   input "2:14:SynPS/2_Synaptics_TouchPad" {
#       dwt enabled
#       tap enabled
#       natural_scroll enabled
#       middle_emulation enabled
#   }
#
# You can get the names of your inputs by running: swaymsg -t get_inputs
# Read `man 5 sway-input` for more information about this section.

# Config touchpad controls
    input type:touchpad {
        dwt enabled
        tap enabled
        natural_scroll enabled
        pointer_accel 0.35
    }
    input type:keyboard {
        xkb_numlock enabled
    }

### Key bindings
#
# Basics:
#
    # Start a terminal
    bindsym $mod+Return exec $term

    # Kill focused window
    bindsym $mod+Shift+q kill

    # Start your launcher
    bindsym $mod+d exec $menu

    # Drag floating windows by holding down $mod and left mouse button.
    # Resize them with right mouse button + $mod.
    # Despite the name, also works for non-floating windows.
    # Change normal to inverse to use left mouse button for resizing and right
    # mouse button for dragging.
    floating_modifier $mod normal

    # Reload the configuration file
    bindsym $mod+Shift+c reload

    # Exit sway (logs you out of your Wayland session)
    bindsym $mod+Shift+e exec swaynag -t warning -m 'You pressed the exit shortcut. Do you really want to exit sway? This will end your Wayland session.' -b 'Yes, exit sway' 'swaymsg exit'
#
# Moving around:
#
    # Move your focus around
    bindsym $mod+$left focus left
    bindsym $mod+$down focus down
    bindsym $mod+$up focus up
    bindsym $mod+$right focus right
    # Or use $mod+[up|down|left|right]
    bindsym $mod+Left focus left
    bindsym $mod+Down focus down
    bindsym $mod+Up focus up
    bindsym $mod+Right focus right

    # Move the focused window around by adding Shift
    bindsym $mod+Shift+$left move left
    bindsym $mod+Shift+$down move down
    bindsym $mod+Shift+$up move up
    bindsym $mod+Shift+$right move right
    # Ditto, with arrow keys
    bindsym $mod+Shift+Left move left
    bindsym $mod+Shift+Down move down
    bindsym $mod+Shift+Up move up
    bindsym $mod+Shift+Right move right

    # Move the focused workspace around by adding Control+Shift
    bindsym $mod+Control+Shift+$left move workspace to left
    bindsym $mod+Control+Shift+$down move workspace to down
    bindsym $mod+Control+Shift+$up move workspace to up
    bindsym $mod+Control+Shift+$right move workspace to right
    # them arrow keys
    bindsym $mod+Control+Shift+Left move workspace to left
    bindsym $mod+Control+Shift+Down move workspace to down
    bindsym $mod+Control+Shift+Up move workspace to up
    bindsym $mod+Control+Shift+Right move workspace to right
#
# Workspaces:
#
    # Note: workspaces can have any name you want, not just numbers.
    # We just use 1-10 as the default.

    # Switch to workspace
    bindsym $mod+1 workspace number 1
    bindsym $mod+2 workspace number 2
    bindsym $mod+3 workspace number 3
    bindsym $mod+4 workspace number 4
    bindsym $mod+5 workspace number 5
    bindsym $mod+6 workspace number 6
    bindsym $mod+7 workspace number 7
    bindsym $mod+8 workspace number 8
    bindsym $mod+9 workspace number 9
    bindsym $mod+0 workspace number 10
    # Move focused container to workspace and switch to it
    bindsym $mod+Shift+1 move container to workspace number 1; workspace number 1
    bindsym $mod+Shift+2 move container to workspace number 2; workspace number 2
    bindsym $mod+Shift+3 move container to workspace number 3; workspace number 3
    bindsym $mod+Shift+4 move container to workspace number 4; workspace number 4
    bindsym $mod+Shift+5 move container to workspace number 5; workspace number 5
    bindsym $mod+Shift+6 move container to workspace number 6; workspace number 6
    bindsym $mod+Shift+7 move container to workspace number 7; workspace number 7
    bindsym $mod+Shift+8 move container to workspace number 8; workspace number 8
    bindsym $mod+Shift+9 move container to workspace number 9; workspace number 9
    bindsym $mod+Shift+0 move container to workspace number 10; workspace number 10
    # Move to prev workspace on output
    bindsym $mod+bracketleft workspace prev_on_output
    # Move to next workspace on output
    bindsym $mod+bracketright workspace next_on_output

#
# Layout stuff:
#
    # You can "split" the current object of your focus with
    # $mod+b or $mod+v, for horizontal and vertical splits
    # respectively.
    bindsym $mod+b splith
    bindsym $mod+v splitv

    # Switch the current container between different layout styles
    bindsym $mod+s layout stacking
    bindsym $mod+w layout toggle tabbed split
    bindsym $mod+e layout toggle split

    # Make the current focus fullscreen
    bindsym $mod+f fullscreen

    # Toggle the current focus between tiling and floating mode
    bindsym $mod+Shift+space floating toggle

    # Swap focus between the tiling area and the floating area
    bindsym $mod+space focus mode_toggle

    # Move focus to the parent container
    bindsym $mod+a focus parent

#
# Screenshots:
#
    # Screenshots will copy to the clipboard by default
    # When holding Control, write to the ~/Pictures directory instead

    # Screenshot current focused window
    bindsym Print exec --no-startup-id grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"')" - | wl-copy
    bindsym Control+Print exec --no-startup-id grim -g "$(swaymsg -t get_tree | jq -r '.. | select(.focused?) | .rect | "\(.x),\(.y) \(.width)x\(.height)"')"

    # Screenshot entire desktop
    bindsym $alt+Print exec --no-startup-id grim - | wl-copy
    bindsym $alt+Control+Print exec --no-startup-id grim

    # Screenshot mouse selection
    bindsym $mod+Print exec --no-startup-id grim -g "$(slurp)" - | wl-copy
    bindsym $mod+Control+Print exec --no-startup-id grim -g "$(slurp)"


#
# Scratchpad:
#
    # Sway has a "scratchpad", which is a bag of holding for windows.
    # You can send windows there and get them back later.

    # Move the currently focused window to the scratchpad
    bindsym $mod+Shift+minus move scratchpad

    # Show the next scratchpad window or hide the focused scratchpad window.
    # If there are multiple scratchpad windows, this command cycles through them.
    bindsym $mod+minus scratchpad show

#
# Media/brightness buttons:
#
    # Unmute, modify volume, then pipe result to wob
    bindsym XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ 0 && pactl set-sink-volume @DEFAULT_SINK@ +5% && pactl get-sink-volume @DEFAULT_SINK@ | head -n 1 | awk '{print substr($5, 1, length($5)-1)}' > $WOBSOCK
    bindsym XF86AudioLowerVolume exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ 0 && pactl set-sink-volume @DEFAULT_SINK@ -5% && pactl get-sink-volume @DEFAULT_SINK@ | head -n 1 | awk '{print substr($5, 1, length($5)-1)}' > $WOBSOCK
    bindsym Shift+XF86AudioRaiseVolume exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ 0 && pactl set-sink-volume @DEFAULT_SINK@ +1% && pactl get-sink-volume @DEFAULT_SINK@ | head -n 1 | awk '{print substr($5, 1, length($5)-1)}' > $WOBSOCK
    bindsym Shift+XF86AudioLowerVolume exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ 0 && pactl set-sink-volume @DEFAULT_SINK@ -1% && pactl get-sink-volume @DEFAULT_SINK@ | head -n 1 | awk '{print substr($5, 1, length($5)-1)}' > $WOBSOCK
    # Toggle mute, then pipe either 0 or original volume to wob
    bindsym XF86AudioMute exec --no-startup-id pactl set-sink-mute @DEFAULT_SINK@ toggle && ([[ $(pactl get-sink-mute @DEFAULT_SINK@ | cut -d' ' -f2) = 'yes' ]] && echo '0' || pactl get-sink-volume @DEFAULT_SINK@ | head -n 1 | awk '{print substr($5, 1, length($5)-1)}') > $WOBSOCK
    # Pipe brightness to wob
    bindsym XF86MonBrightnessUp exec --no-startup-id brightnessctl set +5% | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
    bindsym XF86MonBrightnessDown exec --no-startup-id brightnessctl set 5%- | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
    bindsym Shift+XF86MonBrightnessUp exec --no-startup-id brightnessctl set +1% | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
    bindsym Shift+XF86MonBrightnessDown exec --no-startup-id brightnessctl set 1%- | sed -En 's/.*\(([0-9]+)%\).*/\1/p' > $WOBSOCK
    bindsym XF86AudioPlay exec playerctl play-pause
    bindsym XF86AudioNext exec playerctl next
    bindsym XF86AudioPrev exec playerctl previous

#
# Resizing containers:
#
mode "resize" {
    # left will shrink the containers width
    # right will grow the containers width
    # up will shrink the containers height
    # down will grow the containers height
    bindsym $left resize shrink width 10px
    bindsym $down resize grow height 10px
    bindsym $up resize shrink height 10px
    bindsym $right resize grow width 10px

    # Ditto, with arrow keys
    bindsym Left resize shrink width 10px
    bindsym Down resize grow height 10px
    bindsym Up resize shrink height 10px
    bindsym Right resize grow width 10px

    # Return to default mode
    bindsym Return mode "default"
    bindsym Escape mode "default"
    bindsym Space mode "default"
}
bindsym $mod+r mode "resize"

#
# System controls:
#

# Manual lock
bindsym $mod+Escape exec "swaylock --grace 0"
# Power menu
bindsym $mod+Shift+Escape exec "~/.config/sway/powermenu.sh"
# Dismiss notifications
bindsym $mod+q exec "makoctl dismiss -a"
# Clipboard manager
bindsym $mod+o exec clipman pick

#
# Specific app settings
#

# No borders for browsers
for_window [app_id="firefox"] border none
for_window [app_id="google-chrome"] border none
# Disable swayidle during browser fullscreen
for_window [app_id="firefox"] inhibit_idle fullscreen
for_window [app_id="google-chrome"] inhibit_idle fullscreen
# Always float some applications by default
for_window [app_id="pavucontrol"] floating enable
for_window [title="nmtui"] floating enable

include /etc/sway/config.d/*
