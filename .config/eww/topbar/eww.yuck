;;
;; Icons: https://fontawesome.com/icons
;;

(defvar str_reveal-slide-duration "200ms")
(defvar str_hover-delay-long "0.3")
(defvar str_hover-delay-short "0.1")

;;;;;;;;;;;;;
;; Windows ;;
;;;;;;;;;;;;;

(defwindow topbar
  :monitor 0
  :geometry (geometry
              :x "0%"
              :y "0%"
              :width "100%"
              :height "2%"
              :anchor "top center")
  ; X11 props
  :windowtype "dock"
  ; Wayland props
  :exclusive true
  (topbar))

(defwindow audio-window
  :monitor 0
  :geometry (geometry
              :anchor "top right")
  ; Wayland props
  :stacking "fg"
  (audio-control-pane))

;;;;;;;;;;;;;
;; Widgets ;;
;;;;;;;;;;;;;

;;;;;;;;;;
;; Top Bar
(defwidget topbar []
  (eventbox
    :onhover "./run eww::grace_hover bool_topbar-hover"
    :onhoverlost "./run eww::grace_hover_lost bool_topbar-hover ${str_hover-delay-long}"
    (centerbox
      :class "top-bar"
      :orientation "h"
      (topbar-left)
      (topbar-middle)
      (topbar-right))))

(defwidget topbar-left []
  (box
    :orientation "h"
    :halign "start"
    (workspaces)))

(defwidget topbar-middle []
  (box
    :orientation "h"
    :halign "fill"
    :hexpand true
    (clock)))

(defwidget topbar-right []
  (box
    :orientation "h"
    :halign "end"
    (eventbox
      :onhover "./run eww::grace_hover bool_topbar-right-hover"
      :onhoverlost "./run eww::grace_hover_lost bool_topbar-right-hover ${str_hover-delay-long}"
      (box
        :space-evenly false
        :spacing 7
        (network)
        (weather)
        (statusbar)
        (volume-control)))))

(defvar bool_topbar-hover false)
(defvar bool_topbar-middle-hover false)
(defvar bool_topbar-right-hover false)

;;;;;;;;
;; Clock
(defwidget clock []
  (eventbox
    :onclick `echo 'hi'`
    (box
      :orientation "h"
      :class "clock"
      :space-evenly false
      :hexpand false
      (revealer
        :transition "slideright"
        :reveal bool_topbar-hover
        :duration str_reveal-slide-duration
        (label
          :text "${str_date}, "))
      (label
        :text "${str_time}")
      (revealer
        :transition "slideleft"
        :reveal bool_topbar-hover
        :duration str_reveal-slide-duration
        (label
          :text ":${str_time-sec}")))))
(defpoll str_date :interval "5s" `date +"%B %d"`)
(defpoll str_time :interval "5s" `date +"%H:%M"`)
(defpoll str_time-sec :interval "1s" `date +"%S"`)

;;;;;;;;;;
;; Network
(defwidget network []
  (eventbox
    :onhover "./run eww::grace_hover bool_network-hover"
    :onhoverlost "./run eww::grace_hover_lost bool_network-hover ${str_hover-delay-short}"
    (box
      :orientation "h"
      :class "dockcontainer"
      :halign "end"
      :spacing 7
      :space-evenly false
      (for conn in json_net-connections
        (box
          :spacing 5
          :space-evenly false
          (label
            :class "dockcontainer-icon"
            :text {conn.type == "ethernet" ? "" : ""})
          (revealer
            :transition "slideleft"
            :reveal bool_network-hover
            :duration str_reveal-slide-duration
            (label
              :class "dockcontainer-text"
              :text {conn.type == "ethernet" ? "${conn.device}" : "${conn.name}"})))))))
(defvar bool_network-hover false)
(defpoll json_net-connections
  :interval "10s"
  :initial "[]"
  `./run network::get_active_connections`)

;;;;;;;;;;
;; Weather
(defwidget weather []
  (box
    :orientation "h"
    :class "dockcontainer"
    :halign "end"
    :spacing 7
    :space-evenly false
    (label :text str_weather)))
(defpoll str_weather :interval "5m" `./run weather::status`)

;;;;;;;;;;;;;
;; Status Bar
(defwidget statusbar []
  (eventbox
    :onhover "./run eww::grace_hover bool_statusbar-hover"
    :onhoverlost "./run eww::grace_hover_lost bool_statusbar-hover ${str_hover-delay-short}"
    (box
      :orientation "h"
      :class "dockcontainer"
      :halign "end"
      :spacing 7
      :space-evenly false
      (statusbar-bat)
      (statusbar-ram)
      (statusbar-cpu))))
(defvar bool_statusbar-hover false)
;; Battery
(defwidget statusbar-bat []
  (box
    :orientation "h"
    :halign "end"
    :spacing 5
    :space-evenly false
    :visible bool_statusbar-bat-available
    (overlay
      (circular-progress
        :class "statusbar-bat-circle-${str_statusbar-bat-capacity-level}"
        :value int_statusbar-bat-capacity
        :thickness 14)
      (label
        :class "dockcontainer-icon"
        :text {! (str_statusbar-bat-status =~ '^discharging$') ? '':
               int_statusbar-bat-capacity > 80 ? "" :
               int_statusbar-bat-capacity > 60 ? "" :
               int_statusbar-bat-capacity > 40 ? "" :
               int_statusbar-bat-capacity > 20 ? "" : ""}))
    (revealer
      :transition "slideleft"
      :reveal bool_statusbar-hover
      :duration str_reveal-slide-duration
      (label
        :class "dockcontainer-text"
        :text "${int_statusbar-bat-capacity}%"))))
(defpoll bool_statusbar-bat-available :interval "1m" :initial false `./run power::on_bat -p`)
(defpoll int_statusbar-bat-capacity :interval "1m" :initial 0 `./run power::get_capacity`)
(defpoll str_statusbar-bat-capacity-level :interval "1m" `./run power::get_capacity_level`)
(defpoll str_statusbar-bat-status :interval "1s" `./run power::get_status`)
;; RAM
(defwidget statusbar-ram []
  (box
    :orientation "h"
    :halign "end"
    :spacing 5
    :space-evenly false
    (overlay
      :halign "center"
      (circular-progress
        :class "statusbar-ram-circle"
        :value {round(EWW_RAM.used_mem_perc, 0)}
        :thickness 14)
      (label
        :class "dockcontainer-icon"
        :text ""))
    (revealer
      :transition "slideleft"
      :reveal bool_statusbar-hover
      :duration str_reveal-slide-duration
      (label
        :class "dockcontainer-text"
        :text "${round(EWW_RAM.used_mem_perc, 0)}%"))))
;; CPU
(defwidget statusbar-cpu []
  (box
    :orientation "h"
    :halign "end"
    :spacing 5
    :space-evenly false
    (overlay
      (circular-progress
        :class "statusbar-cpu-circle"
        :value {round(EWW_CPU.avg, 0)}
        :thickness 14)
      (label
        :class "dockcontainer-icon"
        :text ""))
    (revealer
      :transition "slideleft"
      :reveal bool_statusbar-hover
      :duration str_reveal-slide-duration
      (label
        :class "dockcontainer-text"
        :text "${round(EWW_CPU.avg, 0)}%"))))

;;;;;;;;
;; Audio

; Volume Control
(defwidget volume-control []
  (eventbox
    :onclick "pactl set-sink-mute @DEFAULT_SINK@ toggle"
    :onrightclick "./run eww::popup open audio-window && ${EWW_CMD} update bool_audio-control-pane-visible=true"
    :onscroll `pactl set-sink-mute @DEFAULT_SINK@ no && [[ {} == 'up' ]] && pactl set-sink-volume @DEFAULT_SINK@ +5% || pactl set-sink-volume @DEFAULT_SINK@ -5%`
    (box
      :orientation "h"
      :class "audio-vol"
      :halign "end"
      :space-evenly false
      :spacing 5
      (label
        :class "audio-vol-icon-${str_volume == 0 ? 'mute' :
                                 str_volume > 100 ? 'amp' : 'default'}"
        :text {str_volume == 0 ? "" :
               str_volume < 80 ? "" : ""})
      (label
       :class "audio-vol-value"
       :text "${str_volume}%"))))
(deflisten str_volume :initial 0 `./run audio::subscribe`)

; Audio Control Pane
(defwidget audio-control-pane []
  (eventbox
    :onhoverlost "./run eww::popup close audio-window && ${EWW_CMD} update bool_audio-control-pane-visible=false"
    :onscroll `./run audio::scroll_sinks {} && ${EWW_CMD} update json_audio-sinks="$(./run audio::get_sinks)"`
    (box
      :orientation "h"
      :class "audio-control-pane"
      :space-evenly false
      (box
        :orientation "v"
        :class "audio-control-pane-box"
        (for sink in json_audio-sinks
          (button
            :onclick `./run audio::set_default_sink ${sink.id} && ${EWW_CMD} update json_audio-sinks="$(./run audio::get_sinks)"`
            :class "audio-control-pane-sink-option${sink.is_default ? '-default' : ''}"
            "${sink.name}")))
      (box
        :class "audio-control-pane-box"
        (button
          :class "audio-control-pane-config-button"
          :onclick `pavucontrol &`
          "")))))
(defvar bool_audio-control-pane-visible false)
(defpoll json_audio-sinks
  :interval "1s"
  :initial "[]"
  :run-while bool_audio-control-pane-visible
  `./run audio::get_sinks`)

;;;;;;;;
;; Workspaces

(defwidget workspaces []
  (box
    :class "workspaces"
    :orientation "h"
    :space-evenly false
    :halign "start"
    (for monitor in json_workspaces
       (box
         :class "workspace-group"
         :orientation "h"
         :space-evenly true
         :spacing 2
         (for workspace in monitor
           (button
             :class {workspace.focused ? "workspace-btn-focus" : "workspace-btn"}
             :onclick "./run workspace::focus ${workspace.name}"
             "${workspace.name}"))))))
(deflisten json_workspaces :initial "[]" `./run workspace::focus_subscriber`)
